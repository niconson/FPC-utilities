//---------------------------------------------------------------------------


#pragma hdrstop

#include "Gen_RndRectPoly.h"
#include "To_DXF.h"
#include "DXF_library.h"
//---------------------------------------------------------------------------

#pragma package(smart_init)

int Gen_RndRectPoly (int x, int y, int dx, int dy, float rad, float ang, CPoint * OutPut, int npoints )
{
	if( npoints%4 )
		return 0;
	double angle = 0.0;
	double angle_step = M_PI/((npoints-4)/2);
	int npo = 0;
	if( rad > 2 )
		for( int i=0; i<(npoints/4-1); i++ )
		{
			OutPut[npo].x = + dx/2 - rad + rad*cos(angle);
			OutPut[npo].y = + dy/2 - rad + rad*sin(angle);
			npo++;
			angle += angle_step;
		}
	OutPut[npo].x = + dx/2 - rad;
	OutPut[npo].y = + dy/2;
	npo++;
	if( rad > 2 )
		for( int i=0; i<(npoints/4-1); i++ )
		{
			OutPut[npo].x = - dx/2 + rad + rad*cos(angle);
			OutPut[npo].y = + dy/2 - rad + rad*sin(angle);
			npo++;
			angle += angle_step;
		}
	OutPut[npo].x = - dx/2;
	OutPut[npo].y = + dy/2 - rad;
	npo++;
	if( rad > 2 )
		for( int i=0; i<(npoints/4-1); i++ )
		{
			OutPut[npo].x = - dx/2 + rad + rad*cos(angle);
			OutPut[npo].y = - dy/2 + rad + rad*sin(angle);
			npo++;
			angle += angle_step;
		}
	OutPut[npo].x = - dx/2 + rad;
	OutPut[npo].y = - dy/2;
	npo++;
	// 4
	if( rad > 2 )
		for( int i=0; i<(npoints/4-1); i++ )
		{
			OutPut[npo].x = + dx/2 - rad + rad*cos(angle);
			OutPut[npo].y = - dy/2 + rad + rad*sin(angle);
			npo++;
			angle += angle_step;
		}
	OutPut[npo].x = + dx/2;
	OutPut[npo].y = - dy/2 + rad;
	npo++;
	if( ang )
		RotatePOINTS( OutPut, npo, ang, zero );
	for( int i=0; i<npo; i++ )
	{
		OutPut[i].x += x;
		OutPut[i].y += y;
	}
	return npo;
}